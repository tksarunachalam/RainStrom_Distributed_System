// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.27.3
// source: mp3.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RequestType int32

const (
	RequestType_GET    RequestType = 0
	RequestType_CREATE RequestType = 1
	RequestType_APPEND RequestType = 2
	RequestType_DELETE RequestType = 3
	RequestType_MERGE  RequestType = 4
)

// Enum value maps for RequestType.
var (
	RequestType_name = map[int32]string{
		0: "GET",
		1: "CREATE",
		2: "APPEND",
		3: "DELETE",
		4: "MERGE",
	}
	RequestType_value = map[string]int32{
		"GET":    0,
		"CREATE": 1,
		"APPEND": 2,
		"DELETE": 3,
		"MERGE":  4,
	}
)

func (x RequestType) Enum() *RequestType {
	p := new(RequestType)
	*p = x
	return p
}

func (x RequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_mp3_proto_enumTypes[0].Descriptor()
}

func (RequestType) Type() protoreflect.EnumType {
	return &file_mp3_proto_enumTypes[0]
}

func (x RequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestType.Descriptor instead.
func (RequestType) EnumDescriptor() ([]byte, []int) {
	return file_mp3_proto_rawDescGZIP(), []int{0}
}

type ResponseType int32

const (
	ResponseType_SUCCESS ResponseType = 0
	ResponseType_FAIL    ResponseType = 1
)

// Enum value maps for ResponseType.
var (
	ResponseType_name = map[int32]string{
		0: "SUCCESS",
		1: "FAIL",
	}
	ResponseType_value = map[string]int32{
		"SUCCESS": 0,
		"FAIL":    1,
	}
)

func (x ResponseType) Enum() *ResponseType {
	p := new(ResponseType)
	*p = x
	return p
}

func (x ResponseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseType) Descriptor() protoreflect.EnumDescriptor {
	return file_mp3_proto_enumTypes[1].Descriptor()
}

func (ResponseType) Type() protoreflect.EnumType {
	return &file_mp3_proto_enumTypes[1]
}

func (x ResponseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseType.Descriptor instead.
func (ResponseType) EnumDescriptor() ([]byte, []int) {
	return file_mp3_proto_rawDescGZIP(), []int{1}
}

type TransferRequestType int32

const (
	TransferRequestType_CREATE_TransferFileType             TransferRequestType = 0
	TransferRequestType_APPEND_TransferFileType             TransferRequestType = 1
	TransferRequestType_AOL_Transfer_TransferFileType       TransferRequestType = 2
	TransferRequestType_REPLICATE_Transfer_TransferFileType TransferRequestType = 3
	TransferRequestType_READ_Transfer                       TransferRequestType = 4
	TransferRequestType_MULTI_APPEND_Transfer               TransferRequestType = 5
	TransferRequestType_MERGE_Transfer                      TransferRequestType = 6
	TransferRequestType_STREAM_Results                      TransferRequestType = 7
)

// Enum value maps for TransferRequestType.
var (
	TransferRequestType_name = map[int32]string{
		0: "CREATE_TransferFileType",
		1: "APPEND_TransferFileType",
		2: "AOL_Transfer_TransferFileType",
		3: "REPLICATE_Transfer_TransferFileType",
		4: "READ_Transfer",
		5: "MULTI_APPEND_Transfer",
		6: "MERGE_Transfer",
		7: "STREAM_Results",
	}
	TransferRequestType_value = map[string]int32{
		"CREATE_TransferFileType":             0,
		"APPEND_TransferFileType":             1,
		"AOL_Transfer_TransferFileType":       2,
		"REPLICATE_Transfer_TransferFileType": 3,
		"READ_Transfer":                       4,
		"MULTI_APPEND_Transfer":               5,
		"MERGE_Transfer":                      6,
		"STREAM_Results":                      7,
	}
)

func (x TransferRequestType) Enum() *TransferRequestType {
	p := new(TransferRequestType)
	*p = x
	return p
}

func (x TransferRequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferRequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_mp3_proto_enumTypes[2].Descriptor()
}

func (TransferRequestType) Type() protoreflect.EnumType {
	return &file_mp3_proto_enumTypes[2]
}

func (x TransferRequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferRequestType.Descriptor instead.
func (TransferRequestType) EnumDescriptor() ([]byte, []int) {
	return file_mp3_proto_rawDescGZIP(), []int{2}
}

type FileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Request type, local file name (optional), HyDfs filename, file data(optional for create/merge)
	TypeReq       RequestType `protobuf:"varint,1,opt,name=type_req,json=typeReq,proto3,enum=hydfs.RequestType" json:"type_req,omitempty"`
	LocalFileName *string     `protobuf:"bytes,2,opt,name=localFileName,proto3,oneof" json:"localFileName,omitempty"`
	HydfsFileName string      `protobuf:"bytes,3,opt,name=hydfsFileName,proto3" json:"hydfsFileName,omitempty"`
	FData         []byte      `protobuf:"bytes,4,opt,name=f_data,json=fData,proto3,oneof" json:"f_data,omitempty"`
}

func (x *FileRequest) Reset() {
	*x = FileRequest{}
	mi := &file_mp3_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileRequest) ProtoMessage() {}

func (x *FileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mp3_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileRequest.ProtoReflect.Descriptor instead.
func (*FileRequest) Descriptor() ([]byte, []int) {
	return file_mp3_proto_rawDescGZIP(), []int{0}
}

func (x *FileRequest) GetTypeReq() RequestType {
	if x != nil {
		return x.TypeReq
	}
	return RequestType_GET
}

func (x *FileRequest) GetLocalFileName() string {
	if x != nil && x.LocalFileName != nil {
		return *x.LocalFileName
	}
	return ""
}

func (x *FileRequest) GetHydfsFileName() string {
	if x != nil {
		return x.HydfsFileName
	}
	return ""
}

func (x *FileRequest) GetFData() []byte {
	if x != nil {
		return x.FData
	}
	return nil
}

type FilResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ack, file version/meta data, file contents(optional), metadata(optional)
	Ack      string  `protobuf:"bytes,1,opt,name=ack,proto3" json:"ack,omitempty"`
	Version  float32 `protobuf:"fixed32,2,opt,name=version,proto3" json:"version,omitempty"`
	FData    []byte  `protobuf:"bytes,3,opt,name=f_data,json=fData,proto3,oneof" json:"f_data,omitempty"`
	MetaData *string `protobuf:"bytes,4,opt,name=metaData,proto3,oneof" json:"metaData,omitempty"`
}

func (x *FilResponse) Reset() {
	*x = FilResponse{}
	mi := &file_mp3_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilResponse) ProtoMessage() {}

func (x *FilResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mp3_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilResponse.ProtoReflect.Descriptor instead.
func (*FilResponse) Descriptor() ([]byte, []int) {
	return file_mp3_proto_rawDescGZIP(), []int{1}
}

func (x *FilResponse) GetAck() string {
	if x != nil {
		return x.Ack
	}
	return ""
}

func (x *FilResponse) GetVersion() float32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *FilResponse) GetFData() []byte {
	if x != nil {
		return x.FData
	}
	return nil
}

func (x *FilResponse) GetMetaData() string {
	if x != nil && x.MetaData != nil {
		return *x.MetaData
	}
	return ""
}

type FileSendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileTransferRequest *FileTransferRequest `protobuf:"bytes,1,opt,name=fileTransferRequest,proto3" json:"fileTransferRequest,omitempty"`
	Chunk               []byte               `protobuf:"bytes,2,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (x *FileSendRequest) Reset() {
	*x = FileSendRequest{}
	mi := &file_mp3_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileSendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileSendRequest) ProtoMessage() {}

func (x *FileSendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mp3_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileSendRequest.ProtoReflect.Descriptor instead.
func (*FileSendRequest) Descriptor() ([]byte, []int) {
	return file_mp3_proto_rawDescGZIP(), []int{2}
}

func (x *FileSendRequest) GetFileTransferRequest() *FileTransferRequest {
	if x != nil {
		return x.FileTransferRequest
	}
	return nil
}

func (x *FileSendRequest) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

type MultiAppendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response ResponseType `protobuf:"varint,1,opt,name=response,proto3,enum=hydfs.ResponseType" json:"response,omitempty"`
}

func (x *MultiAppendResponse) Reset() {
	*x = MultiAppendResponse{}
	mi := &file_mp3_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiAppendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiAppendResponse) ProtoMessage() {}

func (x *MultiAppendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mp3_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiAppendResponse.ProtoReflect.Descriptor instead.
func (*MultiAppendResponse) Descriptor() ([]byte, []int) {
	return file_mp3_proto_rawDescGZIP(), []int{3}
}

func (x *MultiAppendResponse) GetResponse() ResponseType {
	if x != nil {
		return x.Response
	}
	return ResponseType_SUCCESS
}

type MergeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message  string       `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Response ResponseType `protobuf:"varint,2,opt,name=response,proto3,enum=hydfs.ResponseType" json:"response,omitempty"` // Response message
}

func (x *MergeResponse) Reset() {
	*x = MergeResponse{}
	mi := &file_mp3_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MergeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeResponse) ProtoMessage() {}

func (x *MergeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mp3_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeResponse.ProtoReflect.Descriptor instead.
func (*MergeResponse) Descriptor() ([]byte, []int) {
	return file_mp3_proto_rawDescGZIP(), []int{4}
}

func (x *MergeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MergeResponse) GetResponse() ResponseType {
	if x != nil {
		return x.Response
	}
	return ResponseType_SUCCESS
}

type MergeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HydfsFileName string `protobuf:"bytes,1,opt,name=hydfsFileName,proto3" json:"hydfsFileName,omitempty"` // The HyDFS file being merged
}

func (x *MergeRequest) Reset() {
	*x = MergeRequest{}
	mi := &file_mp3_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MergeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeRequest) ProtoMessage() {}

func (x *MergeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mp3_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeRequest.ProtoReflect.Descriptor instead.
func (*MergeRequest) Descriptor() ([]byte, []int) {
	return file_mp3_proto_rawDescGZIP(), []int{5}
}

func (x *MergeRequest) GetHydfsFileName() string {
	if x != nil {
		return x.HydfsFileName
	}
	return ""
}

type FileSendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *FileSendResponse) Reset() {
	*x = FileSendResponse{}
	mi := &file_mp3_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileSendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileSendResponse) ProtoMessage() {}

func (x *FileSendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mp3_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileSendResponse.ProtoReflect.Descriptor instead.
func (*FileSendResponse) Descriptor() ([]byte, []int) {
	return file_mp3_proto_rawDescGZIP(), []int{6}
}

func (x *FileSendResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type FileReceiveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId string `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
}

func (x *FileReceiveRequest) Reset() {
	*x = FileReceiveRequest{}
	mi := &file_mp3_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileReceiveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileReceiveRequest) ProtoMessage() {}

func (x *FileReceiveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mp3_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileReceiveRequest.ProtoReflect.Descriptor instead.
func (*FileReceiveRequest) Descriptor() ([]byte, []int) {
	return file_mp3_proto_rawDescGZIP(), []int{7}
}

func (x *FileReceiveRequest) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

type FileReceiveReponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunk []byte `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (x *FileReceiveReponse) Reset() {
	*x = FileReceiveReponse{}
	mi := &file_mp3_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileReceiveReponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileReceiveReponse) ProtoMessage() {}

func (x *FileReceiveReponse) ProtoReflect() protoreflect.Message {
	mi := &file_mp3_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileReceiveReponse.ProtoReflect.Descriptor instead.
func (*FileReceiveReponse) Descriptor() ([]byte, []int) {
	return file_mp3_proto_rawDescGZIP(), []int{8}
}

func (x *FileReceiveReponse) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

type FileTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcNodeId           int32               `protobuf:"varint,1,opt,name=SrcNodeId,proto3" json:"SrcNodeId,omitempty"`
	DestNodeId          int32               `protobuf:"varint,2,opt,name=DestNodeId,proto3" json:"DestNodeId,omitempty"`
	SrcPeerd            int32               `protobuf:"varint,3,opt,name=SrcPeerd,proto3" json:"SrcPeerd,omitempty"`
	DestPeerId          int32               `protobuf:"varint,4,opt,name=DestPeerId,proto3" json:"DestPeerId,omitempty"`
	SrcFileName         string              `protobuf:"bytes,5,opt,name=SrcFileName,proto3" json:"SrcFileName,omitempty"`
	SrcFilePath         string              `protobuf:"bytes,9,opt,name=SrcFilePath,proto3" json:"SrcFilePath,omitempty"`
	DestFilePath        string              `protobuf:"bytes,10,opt,name=DestFilePath,proto3" json:"DestFilePath,omitempty"`
	DestFileName        string              `protobuf:"bytes,6,opt,name=DestFileName,proto3" json:"DestFileName,omitempty"`
	FileData            []byte              `protobuf:"bytes,7,opt,name=FileData,proto3" json:"FileData,omitempty"`
	TransferRequestType TransferRequestType `protobuf:"varint,8,opt,name=TransferRequestType,proto3,enum=hydfs.TransferRequestType" json:"TransferRequestType,omitempty"`
	TargetAddr          string              `protobuf:"bytes,11,opt,name=targetAddr,proto3" json:"targetAddr,omitempty"`
}

func (x *FileTransferRequest) Reset() {
	*x = FileTransferRequest{}
	mi := &file_mp3_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileTransferRequest) ProtoMessage() {}

func (x *FileTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mp3_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileTransferRequest.ProtoReflect.Descriptor instead.
func (*FileTransferRequest) Descriptor() ([]byte, []int) {
	return file_mp3_proto_rawDescGZIP(), []int{9}
}

func (x *FileTransferRequest) GetSrcNodeId() int32 {
	if x != nil {
		return x.SrcNodeId
	}
	return 0
}

func (x *FileTransferRequest) GetDestNodeId() int32 {
	if x != nil {
		return x.DestNodeId
	}
	return 0
}

func (x *FileTransferRequest) GetSrcPeerd() int32 {
	if x != nil {
		return x.SrcPeerd
	}
	return 0
}

func (x *FileTransferRequest) GetDestPeerId() int32 {
	if x != nil {
		return x.DestPeerId
	}
	return 0
}

func (x *FileTransferRequest) GetSrcFileName() string {
	if x != nil {
		return x.SrcFileName
	}
	return ""
}

func (x *FileTransferRequest) GetSrcFilePath() string {
	if x != nil {
		return x.SrcFilePath
	}
	return ""
}

func (x *FileTransferRequest) GetDestFilePath() string {
	if x != nil {
		return x.DestFilePath
	}
	return ""
}

func (x *FileTransferRequest) GetDestFileName() string {
	if x != nil {
		return x.DestFileName
	}
	return ""
}

func (x *FileTransferRequest) GetFileData() []byte {
	if x != nil {
		return x.FileData
	}
	return nil
}

func (x *FileTransferRequest) GetTransferRequestType() TransferRequestType {
	if x != nil {
		return x.TransferRequestType
	}
	return TransferRequestType_CREATE_TransferFileType
}

func (x *FileTransferRequest) GetTargetAddr() string {
	if x != nil {
		return x.TargetAddr
	}
	return ""
}

type FileReadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HydfsFileName string `protobuf:"bytes,1,opt,name=hydfsFileName,proto3" json:"hydfsFileName,omitempty"` // The name of the file in HyDFS
}

func (x *FileReadRequest) Reset() {
	*x = FileReadRequest{}
	mi := &file_mp3_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileReadRequest) ProtoMessage() {}

func (x *FileReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mp3_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileReadRequest.ProtoReflect.Descriptor instead.
func (*FileReadRequest) Descriptor() ([]byte, []int) {
	return file_mp3_proto_rawDescGZIP(), []int{10}
}

func (x *FileReadRequest) GetHydfsFileName() string {
	if x != nil {
		return x.HydfsFileName
	}
	return ""
}

type FileReadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunk []byte `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"` // The chunk of file data being streamed
}

func (x *FileReadResponse) Reset() {
	*x = FileReadResponse{}
	mi := &file_mp3_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileReadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileReadResponse) ProtoMessage() {}

func (x *FileReadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mp3_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileReadResponse.ProtoReflect.Descriptor instead.
func (*FileReadResponse) Descriptor() ([]byte, []int) {
	return file_mp3_proto_rawDescGZIP(), []int{11}
}

func (x *FileReadResponse) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

type ReplicateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AolEntry []byte `protobuf:"bytes,1,opt,name=aolEntry,proto3" json:"aolEntry,omitempty"`
}

func (x *ReplicateRequest) Reset() {
	*x = ReplicateRequest{}
	mi := &file_mp3_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicateRequest) ProtoMessage() {}

func (x *ReplicateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mp3_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicateRequest.ProtoReflect.Descriptor instead.
func (*ReplicateRequest) Descriptor() ([]byte, []int) {
	return file_mp3_proto_rawDescGZIP(), []int{12}
}

func (x *ReplicateRequest) GetAolEntry() []byte {
	if x != nil {
		return x.AolEntry
	}
	return nil
}

type ReplicateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ReplicateResponse) Reset() {
	*x = ReplicateResponse{}
	mi := &file_mp3_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicateResponse) ProtoMessage() {}

func (x *ReplicateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mp3_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicateResponse.ProtoReflect.Descriptor instead.
func (*ReplicateResponse) Descriptor() ([]byte, []int) {
	return file_mp3_proto_rawDescGZIP(), []int{13}
}

func (x *ReplicateResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_mp3_proto protoreflect.FileDescriptor

var file_mp3_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6d, 0x70, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x68, 0x79, 0x64,
	0x66, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x68, 0x79, 0x64, 0x66, 0x73, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x29, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0d,
	0x68, 0x79, 0x64, 0x66, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x79, 0x64, 0x66, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x06, 0x66, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x01, 0x52, 0x05, 0x66, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8e, 0x01, 0x0a, 0x0b,
	0x46, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x06, 0x66, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x66, 0x44, 0x61, 0x74, 0x61,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x22, 0x75, 0x0a, 0x0f,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4c, 0x0a, 0x13, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68,
	0x79, 0x64, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x13, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x22, 0x46, 0x0a, 0x13, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x70, 0x70, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x68,
	0x79, 0x64, 0x66, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5a, 0x0a, 0x0d, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x68, 0x79, 0x64, 0x66, 0x73,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x0a, 0x0c, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x79, 0x64, 0x66, 0x73,
	0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x68, 0x79, 0x64, 0x66, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2c, 0x0a,
	0x10, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2d, 0x0a, 0x12, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x2a, 0x0a, 0x12, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0xa5, 0x03, 0x0a, 0x13, 0x46, 0x69, 0x6c, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x72, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x53, 0x72, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x44, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x44, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x53, 0x72, 0x63, 0x50, 0x65, 0x65, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x53, 0x72, 0x63, 0x50, 0x65, 0x65, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x73, 0x74,
	0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x44, 0x65,
	0x73, 0x74, 0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x72, 0x63, 0x46,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53,
	0x72, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x72,
	0x63, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x53, 0x72, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c,
	0x44, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x44, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x22, 0x0a, 0x0c, 0x44, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x4c, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x68, 0x79, 0x64, 0x66, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x22, 0x37,
	0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x79, 0x64, 0x66, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x79, 0x64, 0x66, 0x73, 0x46,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x28, 0x0a, 0x10, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x22, 0x2e, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x61, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x22, 0x2d, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2a, 0x45, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x07, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x50, 0x50, 0x45, 0x4e, 0x44, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05,
	0x4d, 0x45, 0x52, 0x47, 0x45, 0x10, 0x04, 0x2a, 0x25, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x01, 0x2a, 0xf1,
	0x01, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x5f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x50, 0x50, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x01,
	0x12, 0x21, 0x0a, 0x1d, 0x41, 0x4f, 0x4c, 0x5f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x5f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45,
	0x5f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d,
	0x52, 0x45, 0x41, 0x44, 0x5f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x10, 0x04, 0x12,
	0x19, 0x0a, 0x15, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x41, 0x50, 0x50, 0x45, 0x4e, 0x44, 0x5f,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x45,
	0x52, 0x47, 0x45, 0x5f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x10, 0x06, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x10, 0x07, 0x32, 0xec, 0x04, 0x0a, 0x0c, 0x48, 0x79, 0x44, 0x66, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x11, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x2e, 0x68, 0x79, 0x64, 0x66, 0x73,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x68,
	0x79, 0x64, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3d, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x2e, 0x68,
	0x79, 0x64, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x68, 0x79, 0x64, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x12,
	0x45, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x19,
	0x2e, 0x68, 0x79, 0x64, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x68, 0x79, 0x64, 0x66,
	0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x46, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x17, 0x2e, 0x68, 0x79,
	0x64, 0x66, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x68, 0x79, 0x64, 0x66, 0x73, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d,
	0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x2e, 0x68, 0x79, 0x64,
	0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x68, 0x79, 0x64, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x45, 0x0a,
	0x0b, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x1a, 0x2e, 0x68,
	0x79, 0x64, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x68, 0x79, 0x64, 0x66, 0x73,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x1a, 0x2e, 0x68, 0x79, 0x64, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x68, 0x79, 0x64, 0x66, 0x73, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x14, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x54, 0x6f, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x12, 0x13, 0x2e, 0x68, 0x79,
	0x64, 0x66, 0x73, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x68, 0x79, 0x64, 0x66, 0x73, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x12, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1a, 0x2e, 0x68,
	0x79, 0x64, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x68, 0x79, 0x64, 0x66, 0x73,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mp3_proto_rawDescOnce sync.Once
	file_mp3_proto_rawDescData = file_mp3_proto_rawDesc
)

func file_mp3_proto_rawDescGZIP() []byte {
	file_mp3_proto_rawDescOnce.Do(func() {
		file_mp3_proto_rawDescData = protoimpl.X.CompressGZIP(file_mp3_proto_rawDescData)
	})
	return file_mp3_proto_rawDescData
}

var file_mp3_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_mp3_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_mp3_proto_goTypes = []any{
	(RequestType)(0),            // 0: hydfs.RequestType
	(ResponseType)(0),           // 1: hydfs.ResponseType
	(TransferRequestType)(0),    // 2: hydfs.TransferRequestType
	(*FileRequest)(nil),         // 3: hydfs.FileRequest
	(*FilResponse)(nil),         // 4: hydfs.FilResponse
	(*FileSendRequest)(nil),     // 5: hydfs.FileSendRequest
	(*MultiAppendResponse)(nil), // 6: hydfs.MultiAppendResponse
	(*MergeResponse)(nil),       // 7: hydfs.MergeResponse
	(*MergeRequest)(nil),        // 8: hydfs.MergeRequest
	(*FileSendResponse)(nil),    // 9: hydfs.FileSendResponse
	(*FileReceiveRequest)(nil),  // 10: hydfs.FileReceiveRequest
	(*FileReceiveReponse)(nil),  // 11: hydfs.FileReceiveReponse
	(*FileTransferRequest)(nil), // 12: hydfs.FileTransferRequest
	(*FileReadRequest)(nil),     // 13: hydfs.FileReadRequest
	(*FileReadResponse)(nil),    // 14: hydfs.FileReadResponse
	(*ReplicateRequest)(nil),    // 15: hydfs.ReplicateRequest
	(*ReplicateResponse)(nil),   // 16: hydfs.ReplicateResponse
}
var file_mp3_proto_depIdxs = []int32{
	0,  // 0: hydfs.FileRequest.type_req:type_name -> hydfs.RequestType
	12, // 1: hydfs.FileSendRequest.fileTransferRequest:type_name -> hydfs.FileTransferRequest
	1,  // 2: hydfs.MultiAppendResponse.response:type_name -> hydfs.ResponseType
	1,  // 3: hydfs.MergeResponse.response:type_name -> hydfs.ResponseType
	2,  // 4: hydfs.FileTransferRequest.TransferRequestType:type_name -> hydfs.TransferRequestType
	3,  // 5: hydfs.HyDfsService.ExecuteFileSystem:input_type -> hydfs.FileRequest
	5,  // 6: hydfs.HyDfsService.SendFile:input_type -> hydfs.FileSendRequest
	10, // 7: hydfs.HyDfsService.ReceiveFile:input_type -> hydfs.FileReceiveRequest
	15, // 8: hydfs.HyDfsService.ReplicateLogEntry:input_type -> hydfs.ReplicateRequest
	13, // 9: hydfs.HyDfsService.ReadFile:input_type -> hydfs.FileReadRequest
	12, // 10: hydfs.HyDfsService.MultiAppend:input_type -> hydfs.FileTransferRequest
	12, // 11: hydfs.HyDfsService.MergeFile:input_type -> hydfs.FileTransferRequest
	8,  // 12: hydfs.HyDfsService.NotifyPrimaryToMerge:input_type -> hydfs.MergeRequest
	12, // 13: hydfs.HyDfsService.WriteStreamResults:input_type -> hydfs.FileTransferRequest
	4,  // 14: hydfs.HyDfsService.ExecuteFileSystem:output_type -> hydfs.FilResponse
	9,  // 15: hydfs.HyDfsService.SendFile:output_type -> hydfs.FileSendResponse
	11, // 16: hydfs.HyDfsService.ReceiveFile:output_type -> hydfs.FileReceiveReponse
	16, // 17: hydfs.HyDfsService.ReplicateLogEntry:output_type -> hydfs.ReplicateResponse
	14, // 18: hydfs.HyDfsService.ReadFile:output_type -> hydfs.FileReadResponse
	6,  // 19: hydfs.HyDfsService.MultiAppend:output_type -> hydfs.MultiAppendResponse
	7,  // 20: hydfs.HyDfsService.MergeFile:output_type -> hydfs.MergeResponse
	7,  // 21: hydfs.HyDfsService.NotifyPrimaryToMerge:output_type -> hydfs.MergeResponse
	9,  // 22: hydfs.HyDfsService.WriteStreamResults:output_type -> hydfs.FileSendResponse
	14, // [14:23] is the sub-list for method output_type
	5,  // [5:14] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_mp3_proto_init() }
func file_mp3_proto_init() {
	if File_mp3_proto != nil {
		return
	}
	file_mp3_proto_msgTypes[0].OneofWrappers = []any{}
	file_mp3_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mp3_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mp3_proto_goTypes,
		DependencyIndexes: file_mp3_proto_depIdxs,
		EnumInfos:         file_mp3_proto_enumTypes,
		MessageInfos:      file_mp3_proto_msgTypes,
	}.Build()
	File_mp3_proto = out.File
	file_mp3_proto_rawDesc = nil
	file_mp3_proto_goTypes = nil
	file_mp3_proto_depIdxs = nil
}
