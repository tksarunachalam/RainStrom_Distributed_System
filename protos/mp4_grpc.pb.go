// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: mp4.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RainStromService_SendTask_FullMethodName                = "/protos.RainStromService/SendTask"
	RainStromService_ExchangeTuples_FullMethodName          = "/protos.RainStromService/ExchangeTuples"
	RainStromService_TriggerConnectToWorkers_FullMethodName = "/protos.RainStromService/TriggerConnectToWorkers"
	RainStromService_UpdateTask_FullMethodName              = "/protos.RainStromService/UpdateTask"
	RainStromService_SendNotification_FullMethodName        = "/protos.RainStromService/SendNotification"
	RainStromService_TransferCommand_FullMethodName         = "/protos.RainStromService/TransferCommand"
)

// RainStromServiceClient is the client API for RainStromService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RainStromServiceClient interface {
	// RPC method for sending a task from leader to worker
	SendTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Ack, error)
	ExchangeTuples(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Tuple, Ack], error)
	TriggerConnectToWorkers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Ack, error)
	UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*Ack, error)
	SendNotification(ctx context.Context, in *Ack, opts ...grpc.CallOption) (*Ack, error)
	TransferCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Ack, error)
}

type rainStromServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRainStromServiceClient(cc grpc.ClientConnInterface) RainStromServiceClient {
	return &rainStromServiceClient{cc}
}

func (c *rainStromServiceClient) SendTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, RainStromService_SendTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rainStromServiceClient) ExchangeTuples(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Tuple, Ack], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RainStromService_ServiceDesc.Streams[0], RainStromService_ExchangeTuples_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Tuple, Ack]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RainStromService_ExchangeTuplesClient = grpc.BidiStreamingClient[Tuple, Ack]

func (c *rainStromServiceClient) TriggerConnectToWorkers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, RainStromService_TriggerConnectToWorkers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rainStromServiceClient) UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, RainStromService_UpdateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rainStromServiceClient) SendNotification(ctx context.Context, in *Ack, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, RainStromService_SendNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rainStromServiceClient) TransferCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, RainStromService_TransferCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RainStromServiceServer is the server API for RainStromService service.
// All implementations must embed UnimplementedRainStromServiceServer
// for forward compatibility.
type RainStromServiceServer interface {
	// RPC method for sending a task from leader to worker
	SendTask(context.Context, *Task) (*Ack, error)
	ExchangeTuples(grpc.BidiStreamingServer[Tuple, Ack]) error
	TriggerConnectToWorkers(context.Context, *Empty) (*Ack, error)
	UpdateTask(context.Context, *UpdateTaskRequest) (*Ack, error)
	SendNotification(context.Context, *Ack) (*Ack, error)
	TransferCommand(context.Context, *Command) (*Ack, error)
	mustEmbedUnimplementedRainStromServiceServer()
}

// UnimplementedRainStromServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRainStromServiceServer struct{}

func (UnimplementedRainStromServiceServer) SendTask(context.Context, *Task) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTask not implemented")
}
func (UnimplementedRainStromServiceServer) ExchangeTuples(grpc.BidiStreamingServer[Tuple, Ack]) error {
	return status.Errorf(codes.Unimplemented, "method ExchangeTuples not implemented")
}
func (UnimplementedRainStromServiceServer) TriggerConnectToWorkers(context.Context, *Empty) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerConnectToWorkers not implemented")
}
func (UnimplementedRainStromServiceServer) UpdateTask(context.Context, *UpdateTaskRequest) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedRainStromServiceServer) SendNotification(context.Context, *Ack) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotification not implemented")
}
func (UnimplementedRainStromServiceServer) TransferCommand(context.Context, *Command) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferCommand not implemented")
}
func (UnimplementedRainStromServiceServer) mustEmbedUnimplementedRainStromServiceServer() {}
func (UnimplementedRainStromServiceServer) testEmbeddedByValue()                          {}

// UnsafeRainStromServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RainStromServiceServer will
// result in compilation errors.
type UnsafeRainStromServiceServer interface {
	mustEmbedUnimplementedRainStromServiceServer()
}

func RegisterRainStromServiceServer(s grpc.ServiceRegistrar, srv RainStromServiceServer) {
	// If the following call pancis, it indicates UnimplementedRainStromServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RainStromService_ServiceDesc, srv)
}

func _RainStromService_SendTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RainStromServiceServer).SendTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RainStromService_SendTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RainStromServiceServer).SendTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _RainStromService_ExchangeTuples_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RainStromServiceServer).ExchangeTuples(&grpc.GenericServerStream[Tuple, Ack]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RainStromService_ExchangeTuplesServer = grpc.BidiStreamingServer[Tuple, Ack]

func _RainStromService_TriggerConnectToWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RainStromServiceServer).TriggerConnectToWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RainStromService_TriggerConnectToWorkers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RainStromServiceServer).TriggerConnectToWorkers(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RainStromService_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RainStromServiceServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RainStromService_UpdateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RainStromServiceServer).UpdateTask(ctx, req.(*UpdateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RainStromService_SendNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ack)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RainStromServiceServer).SendNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RainStromService_SendNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RainStromServiceServer).SendNotification(ctx, req.(*Ack))
	}
	return interceptor(ctx, in, info, handler)
}

func _RainStromService_TransferCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RainStromServiceServer).TransferCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RainStromService_TransferCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RainStromServiceServer).TransferCommand(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

// RainStromService_ServiceDesc is the grpc.ServiceDesc for RainStromService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RainStromService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.RainStromService",
	HandlerType: (*RainStromServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTask",
			Handler:    _RainStromService_SendTask_Handler,
		},
		{
			MethodName: "TriggerConnectToWorkers",
			Handler:    _RainStromService_TriggerConnectToWorkers_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _RainStromService_UpdateTask_Handler,
		},
		{
			MethodName: "SendNotification",
			Handler:    _RainStromService_SendNotification_Handler,
		},
		{
			MethodName: "TransferCommand",
			Handler:    _RainStromService_TransferCommand_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExchangeTuples",
			Handler:       _RainStromService_ExchangeTuples_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "mp4.proto",
}
