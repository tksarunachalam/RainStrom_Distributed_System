// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.27.3
// source: mp4.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NotificationType int32

const (
	NotificationType_LEADER   NotificationType = 0
	NotificationType_SENDER   NotificationType = 1
	NotificationType_RECEIVER NotificationType = 2
)

// Enum value maps for NotificationType.
var (
	NotificationType_name = map[int32]string{
		0: "LEADER",
		1: "SENDER",
		2: "RECEIVER",
	}
	NotificationType_value = map[string]int32{
		"LEADER":   0,
		"SENDER":   1,
		"RECEIVER": 2,
	}
)

func (x NotificationType) Enum() *NotificationType {
	p := new(NotificationType)
	*p = x
	return p
}

func (x NotificationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotificationType) Descriptor() protoreflect.EnumDescriptor {
	return file_mp4_proto_enumTypes[0].Descriptor()
}

func (NotificationType) Type() protoreflect.EnumType {
	return &file_mp4_proto_enumTypes[0]
}

func (x NotificationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotificationType.Descriptor instead.
func (NotificationType) EnumDescriptor() ([]byte, []int) {
	return file_mp4_proto_rawDescGZIP(), []int{0}
}

type ResponseType int32

const (
	ResponseType_SUCCESS   ResponseType = 0
	ResponseType_FAIL      ResponseType = 1
	ResponseType_RECEIVED  ResponseType = 2
	ResponseType_COMPLETED ResponseType = 3
)

// Enum value maps for ResponseType.
var (
	ResponseType_name = map[int32]string{
		0: "SUCCESS",
		1: "FAIL",
		2: "RECEIVED",
		3: "COMPLETED",
	}
	ResponseType_value = map[string]int32{
		"SUCCESS":   0,
		"FAIL":      1,
		"RECEIVED":  2,
		"COMPLETED": 3,
	}
)

func (x ResponseType) Enum() *ResponseType {
	p := new(ResponseType)
	*p = x
	return p
}

func (x ResponseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseType) Descriptor() protoreflect.EnumDescriptor {
	return file_mp4_proto_enumTypes[1].Descriptor()
}

func (ResponseType) Type() protoreflect.EnumType {
	return &file_mp4_proto_enumTypes[1]
}

func (x ResponseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseType.Descriptor instead.
func (ResponseType) EnumDescriptor() ([]byte, []int) {
	return file_mp4_proto_rawDescGZIP(), []int{1}
}

type TaskType int32

const (
	TaskType_TASK_1 TaskType = 0
	TaskType_TASK_2 TaskType = 1
)

// Enum value maps for TaskType.
var (
	TaskType_name = map[int32]string{
		0: "TASK_1",
		1: "TASK_2",
	}
	TaskType_value = map[string]int32{
		"TASK_1": 0,
		"TASK_2": 1,
	}
)

func (x TaskType) Enum() *TaskType {
	p := new(TaskType)
	*p = x
	return p
}

func (x TaskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskType) Descriptor() protoreflect.EnumDescriptor {
	return file_mp4_proto_enumTypes[2].Descriptor()
}

func (TaskType) Type() protoreflect.EnumType {
	return &file_mp4_proto_enumTypes[2]
}

func (x TaskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskType.Descriptor instead.
func (TaskType) EnumDescriptor() ([]byte, []int) {
	return file_mp4_proto_rawDescGZIP(), []int{2}
}

type CommandType int32

const (
	CommandType_RainStromRequest CommandType = 0
	CommandType_ClearFiles       CommandType = 1
	CommandType_Merge            CommandType = 2
)

// Enum value maps for CommandType.
var (
	CommandType_name = map[int32]string{
		0: "RainStromRequest",
		1: "ClearFiles",
		2: "Merge",
	}
	CommandType_value = map[string]int32{
		"RainStromRequest": 0,
		"ClearFiles":       1,
		"Merge":            2,
	}
)

func (x CommandType) Enum() *CommandType {
	p := new(CommandType)
	*p = x
	return p
}

func (x CommandType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommandType) Descriptor() protoreflect.EnumDescriptor {
	return file_mp4_proto_enumTypes[3].Descriptor()
}

func (CommandType) Type() protoreflect.EnumType {
	return &file_mp4_proto_enumTypes[3]
}

func (x CommandType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommandType.Descriptor instead.
func (CommandType) EnumDescriptor() ([]byte, []int) {
	return file_mp4_proto_rawDescGZIP(), []int{3}
}

// Define the Job message
type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId               string                    `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Op1Exe              string                    `protobuf:"bytes,2,opt,name=op1_exe,json=op1Exe,proto3" json:"op1_exe,omitempty"`
	Op2Exe              string                    `protobuf:"bytes,3,opt,name=op2_exe,json=op2Exe,proto3" json:"op2_exe,omitempty"`
	HydfsSrcFile        string                    `protobuf:"bytes,4,opt,name=hydfs_src_file,json=hydfsSrcFile,proto3" json:"hydfs_src_file,omitempty"`
	HydfsDestFile       string                    `protobuf:"bytes,5,opt,name=hydfs_dest_file,json=hydfsDestFile,proto3" json:"hydfs_dest_file,omitempty"`
	NumTasks            int32                     `protobuf:"varint,6,opt,name=num_tasks,json=numTasks,proto3" json:"num_tasks,omitempty"`
	SrcWorker           int32                     `protobuf:"varint,11,opt,name=src_worker,json=srcWorker,proto3" json:"src_worker,omitempty"`
	InputPartitions     []*Partition              `protobuf:"bytes,7,rep,name=input_partitions,json=inputPartitions,proto3" json:"input_partitions,omitempty"`
	OutputPartitions    map[int32]int32           `protobuf:"bytes,8,rep,name=output_partitions,json=outputPartitions,proto3" json:"output_partitions,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	StageTasksWorkerMap map[int32]*PrevWorkerList `protobuf:"bytes,10,rep,name=stage_tasks_worker_map,json=stageTasksWorkerMap,proto3" json:"stage_tasks_worker_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Updated field
	MetaData            map[string]string         `protobuf:"bytes,9,rep,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Job) Reset() {
	*x = Job{}
	mi := &file_mp4_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_mp4_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_mp4_proto_rawDescGZIP(), []int{0}
}

func (x *Job) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *Job) GetOp1Exe() string {
	if x != nil {
		return x.Op1Exe
	}
	return ""
}

func (x *Job) GetOp2Exe() string {
	if x != nil {
		return x.Op2Exe
	}
	return ""
}

func (x *Job) GetHydfsSrcFile() string {
	if x != nil {
		return x.HydfsSrcFile
	}
	return ""
}

func (x *Job) GetHydfsDestFile() string {
	if x != nil {
		return x.HydfsDestFile
	}
	return ""
}

func (x *Job) GetNumTasks() int32 {
	if x != nil {
		return x.NumTasks
	}
	return 0
}

func (x *Job) GetSrcWorker() int32 {
	if x != nil {
		return x.SrcWorker
	}
	return 0
}

func (x *Job) GetInputPartitions() []*Partition {
	if x != nil {
		return x.InputPartitions
	}
	return nil
}

func (x *Job) GetOutputPartitions() map[int32]int32 {
	if x != nil {
		return x.OutputPartitions
	}
	return nil
}

func (x *Job) GetStageTasksWorkerMap() map[int32]*PrevWorkerList {
	if x != nil {
		return x.StageTasksWorkerMap
	}
	return nil
}

func (x *Job) GetMetaData() map[string]string {
	if x != nil {
		return x.MetaData
	}
	return nil
}

// Define the Partition message
type Partition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FileName   string          `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	Start      int32           `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	End        int32           `protobuf:"varint,4,opt,name=end,proto3" json:"end,omitempty"`
	Lines      []string        `protobuf:"bytes,5,rep,name=lines,proto3" json:"lines,omitempty"`
	HashKeyMap map[int32]int32 `protobuf:"bytes,6,rep,name=hashKeyMap,proto3" json:"hashKeyMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // New variable of type map<int, int>
}

func (x *Partition) Reset() {
	*x = Partition{}
	mi := &file_mp4_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Partition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Partition) ProtoMessage() {}

func (x *Partition) ProtoReflect() protoreflect.Message {
	mi := &file_mp4_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Partition.ProtoReflect.Descriptor instead.
func (*Partition) Descriptor() ([]byte, []int) {
	return file_mp4_proto_rawDescGZIP(), []int{1}
}

func (x *Partition) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Partition) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *Partition) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Partition) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *Partition) GetLines() []string {
	if x != nil {
		return x.Lines
	}
	return nil
}

func (x *Partition) GetHashKeyMap() map[int32]int32 {
	if x != nil {
		return x.HashKeyMap
	}
	return nil
}

// Define the Task message
type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId    int32    `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Partition int32    `protobuf:"varint,2,opt,name=partition,proto3" json:"partition,omitempty"`
	WorkerId  int32    `protobuf:"varint,3,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	Files     []string `protobuf:"bytes,4,rep,name=files,proto3" json:"files,omitempty"`                          // Array of strings
	ParentJob *Job     `protobuf:"bytes,5,opt,name=parent_job,json=parentJob,proto3" json:"parent_job,omitempty"` // Parent job
	TaskType  TaskType `protobuf:"varint,6,opt,name=task_type,json=taskType,proto3,enum=protos.TaskType" json:"task_type,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	mi := &file_mp4_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_mp4_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_mp4_proto_rawDescGZIP(), []int{2}
}

func (x *Task) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *Task) GetPartition() int32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *Task) GetWorkerId() int32 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

func (x *Task) GetFiles() []string {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *Task) GetParentJob() *Job {
	if x != nil {
		return x.ParentJob
	}
	return nil
}

func (x *Task) GetTaskType() TaskType {
	if x != nil {
		return x.TaskType
	}
	return TaskType_TASK_1
}

// Define an empty response message
type Ack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message          string           `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	ResponseType     ResponseType     `protobuf:"varint,2,opt,name=response_type,json=responseType,proto3,enum=protos.ResponseType" json:"response_type,omitempty"`
	TupleId          string           `protobuf:"bytes,3,opt,name=TupleId,proto3" json:"TupleId,omitempty"`
	TaskId           int32            `protobuf:"varint,4,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	NotificationType NotificationType `protobuf:"varint,5,opt,name=notificationType,proto3,enum=protos.NotificationType" json:"notificationType,omitempty"`
}

func (x *Ack) Reset() {
	*x = Ack{}
	mi := &file_mp4_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_mp4_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_mp4_proto_rawDescGZIP(), []int{3}
}

func (x *Ack) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Ack) GetResponseType() ResponseType {
	if x != nil {
		return x.ResponseType
	}
	return ResponseType_SUCCESS
}

func (x *Ack) GetTupleId() string {
	if x != nil {
		return x.TupleId
	}
	return ""
}

func (x *Ack) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *Ack) GetNotificationType() NotificationType {
	if x != nil {
		return x.NotificationType
	}
	return NotificationType_LEADER
}

type PrevWorkerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrevWorkers []int32 `protobuf:"varint,1,rep,packed,name=prevWorkers,proto3" json:"prevWorkers,omitempty"`
}

func (x *PrevWorkerList) Reset() {
	*x = PrevWorkerList{}
	mi := &file_mp4_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrevWorkerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrevWorkerList) ProtoMessage() {}

func (x *PrevWorkerList) ProtoReflect() protoreflect.Message {
	mi := &file_mp4_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrevWorkerList.ProtoReflect.Descriptor instead.
func (*PrevWorkerList) Descriptor() ([]byte, []int) {
	return file_mp4_proto_rawDescGZIP(), []int{4}
}

func (x *PrevWorkerList) GetPrevWorkers() []int32 {
	if x != nil {
		return x.PrevWorkers
	}
	return nil
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_mp4_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_mp4_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_mp4_proto_rawDescGZIP(), []int{5}
}

type UpdateTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task *Task `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *UpdateTaskRequest) Reset() {
	*x = UpdateTaskRequest{}
	mi := &file_mp4_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaskRequest) ProtoMessage() {}

func (x *UpdateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mp4_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaskRequest.ProtoReflect.Descriptor instead.
func (*UpdateTaskRequest) Descriptor() ([]byte, []int) {
	return file_mp4_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateTaskRequest) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type Tuple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TupleId        string `protobuf:"bytes,1,opt,name=TupleId,proto3" json:"TupleId,omitempty"` // Unique ID for duplicate detection
	Key            string `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`         // Key (e.g., word)
	Value          int32  `protobuf:"varint,3,opt,name=Value,proto3" json:"Value,omitempty"`    // Value (e.g., count)
	TaskId         int32  `protobuf:"varint,4,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	ReceiverTaskId int32  `protobuf:"varint,5,opt,name=ReceiverTaskId,proto3" json:"ReceiverTaskId,omitempty"`
}

func (x *Tuple) Reset() {
	*x = Tuple{}
	mi := &file_mp4_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tuple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tuple) ProtoMessage() {}

func (x *Tuple) ProtoReflect() protoreflect.Message {
	mi := &file_mp4_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tuple.ProtoReflect.Descriptor instead.
func (*Tuple) Descriptor() ([]byte, []int) {
	return file_mp4_proto_rawDescGZIP(), []int{7}
}

func (x *Tuple) GetTupleId() string {
	if x != nil {
		return x.TupleId
	}
	return ""
}

func (x *Tuple) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Tuple) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Tuple) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *Tuple) GetReceiverTaskId() int32 {
	if x != nil {
		return x.ReceiverTaskId
	}
	return 0
}

type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderId    int32       `protobuf:"varint,1,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`                                  // ID of the sender (worker or leader)
	ReceiverId  int32       `protobuf:"varint,2,opt,name=receiver_id,json=receiverId,proto3" json:"receiver_id,omitempty"`                            // ID of the receiver
	CommandType CommandType `protobuf:"varint,3,opt,name=command_type,json=commandType,proto3,enum=protos.CommandType" json:"command_type,omitempty"` // Type of command (e.g., "TASK_ASSIGNMENT", "STATUS_UPDATE")
	Payload     []byte      `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`                                                     // Generic payload (e.g., JSON-encoded data)
}

func (x *Command) Reset() {
	*x = Command{}
	mi := &file_mp4_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_mp4_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_mp4_proto_rawDescGZIP(), []int{8}
}

func (x *Command) GetSenderId() int32 {
	if x != nil {
		return x.SenderId
	}
	return 0
}

func (x *Command) GetReceiverId() int32 {
	if x != nil {
		return x.ReceiverId
	}
	return 0
}

func (x *Command) GetCommandType() CommandType {
	if x != nil {
		return x.CommandType
	}
	return CommandType_RainStromRequest
}

func (x *Command) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

var File_mp4_proto protoreflect.FileDescriptor

var file_mp4_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6d, 0x70, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x22, 0xdb, 0x05, 0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x12, 0x15, 0x0a, 0x06, 0x6a,
	0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x31, 0x5f, 0x65, 0x78, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x31, 0x45, 0x78, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6f,
	0x70, 0x32, 0x5f, 0x65, 0x78, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70,
	0x32, 0x45, 0x78, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x79, 0x64, 0x66, 0x73, 0x5f, 0x73, 0x72,
	0x63, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x79,
	0x64, 0x66, 0x73, 0x53, 0x72, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x79,
	0x64, 0x66, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x79, 0x64, 0x66, 0x73, 0x44, 0x65, 0x73, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x72, 0x63, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x3c,
	0x0a, 0x10, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x11,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x59, 0x0a, 0x16,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x13, 0x73, 0x74, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x12, 0x36, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x1a,
	0x43, 0x0a, 0x15, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5e, 0x0a, 0x18, 0x53, 0x74, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xf8, 0x01, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x65, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0a, 0x68, 0x61,
	0x73, 0x68, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x1a, 0x3d, 0x0a,
	0x0f, 0x48, 0x61, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcb, 0x01, 0x0a,
	0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12,
	0x2a, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6a, 0x6f, 0x62, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4a, 0x6f, 0x62,
	0x52, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x2d, 0x0a, 0x09, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd2, 0x01, 0x0a, 0x03, 0x41,
	0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x75, 0x70, 0x6c, 0x65,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x10, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x32, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x76, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x73, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x35, 0x0a, 0x11,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74,
	0x61, 0x73, 0x6b, 0x22, 0x89, 0x01, 0x0a, 0x05, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x54, 0x75, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22,
	0x99, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0c, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2a, 0x38, 0x0a, 0x10, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0a, 0x0a, 0x06, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x45, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x43, 0x45, 0x49,
	0x56, 0x45, 0x52, 0x10, 0x02, 0x2a, 0x42, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x22, 0x0a, 0x08, 0x54, 0x61, 0x73,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x31, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x32, 0x10, 0x01, 0x2a, 0x3e, 0x0a,
	0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10,
	0x52, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x10, 0x02, 0x32, 0xb7, 0x02,
	0x0a, 0x10, 0x52, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x1a, 0x0b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x12, 0x30, 0x0a, 0x0e, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x1a, 0x0b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x28, 0x01, 0x30, 0x01, 0x12, 0x35, 0x0a, 0x17, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41,
	0x63, 0x6b, 0x12, 0x34, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x12, 0x2c, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x1a, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x12, 0x2f, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x0b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x2e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mp4_proto_rawDescOnce sync.Once
	file_mp4_proto_rawDescData = file_mp4_proto_rawDesc
)

func file_mp4_proto_rawDescGZIP() []byte {
	file_mp4_proto_rawDescOnce.Do(func() {
		file_mp4_proto_rawDescData = protoimpl.X.CompressGZIP(file_mp4_proto_rawDescData)
	})
	return file_mp4_proto_rawDescData
}

var file_mp4_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_mp4_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_mp4_proto_goTypes = []any{
	(NotificationType)(0),     // 0: protos.NotificationType
	(ResponseType)(0),         // 1: protos.ResponseType
	(TaskType)(0),             // 2: protos.TaskType
	(CommandType)(0),          // 3: protos.CommandType
	(*Job)(nil),               // 4: protos.Job
	(*Partition)(nil),         // 5: protos.Partition
	(*Task)(nil),              // 6: protos.Task
	(*Ack)(nil),               // 7: protos.Ack
	(*PrevWorkerList)(nil),    // 8: protos.PrevWorkerList
	(*Empty)(nil),             // 9: protos.Empty
	(*UpdateTaskRequest)(nil), // 10: protos.UpdateTaskRequest
	(*Tuple)(nil),             // 11: protos.Tuple
	(*Command)(nil),           // 12: protos.Command
	nil,                       // 13: protos.Job.OutputPartitionsEntry
	nil,                       // 14: protos.Job.StageTasksWorkerMapEntry
	nil,                       // 15: protos.Job.MetaDataEntry
	nil,                       // 16: protos.Partition.HashKeyMapEntry
}
var file_mp4_proto_depIdxs = []int32{
	5,  // 0: protos.Job.input_partitions:type_name -> protos.Partition
	13, // 1: protos.Job.output_partitions:type_name -> protos.Job.OutputPartitionsEntry
	14, // 2: protos.Job.stage_tasks_worker_map:type_name -> protos.Job.StageTasksWorkerMapEntry
	15, // 3: protos.Job.meta_data:type_name -> protos.Job.MetaDataEntry
	16, // 4: protos.Partition.hashKeyMap:type_name -> protos.Partition.HashKeyMapEntry
	4,  // 5: protos.Task.parent_job:type_name -> protos.Job
	2,  // 6: protos.Task.task_type:type_name -> protos.TaskType
	1,  // 7: protos.Ack.response_type:type_name -> protos.ResponseType
	0,  // 8: protos.Ack.notificationType:type_name -> protos.NotificationType
	6,  // 9: protos.UpdateTaskRequest.task:type_name -> protos.Task
	3,  // 10: protos.Command.command_type:type_name -> protos.CommandType
	8,  // 11: protos.Job.StageTasksWorkerMapEntry.value:type_name -> protos.PrevWorkerList
	6,  // 12: protos.RainStromService.SendTask:input_type -> protos.Task
	11, // 13: protos.RainStromService.ExchangeTuples:input_type -> protos.Tuple
	9,  // 14: protos.RainStromService.TriggerConnectToWorkers:input_type -> protos.Empty
	10, // 15: protos.RainStromService.UpdateTask:input_type -> protos.UpdateTaskRequest
	7,  // 16: protos.RainStromService.SendNotification:input_type -> protos.Ack
	12, // 17: protos.RainStromService.TransferCommand:input_type -> protos.Command
	7,  // 18: protos.RainStromService.SendTask:output_type -> protos.Ack
	7,  // 19: protos.RainStromService.ExchangeTuples:output_type -> protos.Ack
	7,  // 20: protos.RainStromService.TriggerConnectToWorkers:output_type -> protos.Ack
	7,  // 21: protos.RainStromService.UpdateTask:output_type -> protos.Ack
	7,  // 22: protos.RainStromService.SendNotification:output_type -> protos.Ack
	7,  // 23: protos.RainStromService.TransferCommand:output_type -> protos.Ack
	18, // [18:24] is the sub-list for method output_type
	12, // [12:18] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_mp4_proto_init() }
func file_mp4_proto_init() {
	if File_mp4_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mp4_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mp4_proto_goTypes,
		DependencyIndexes: file_mp4_proto_depIdxs,
		EnumInfos:         file_mp4_proto_enumTypes,
		MessageInfos:      file_mp4_proto_msgTypes,
	}.Build()
	File_mp4_proto = out.File
	file_mp4_proto_rawDesc = nil
	file_mp4_proto_goTypes = nil
	file_mp4_proto_depIdxs = nil
}
